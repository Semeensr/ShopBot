import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot_token = "–í–∞—à —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞"
chat_id= –í–∞—à id —Ç–µ–ª–µ–≥—Ä–∞–º–º
bot = Bot(token=bot_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class FeedbackStates(StatesGroup):
    waiting_for_screenshot = State()
    waiting_for_coupon = State()
    waiting_for_phone = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/start"
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ["üåü –ë–æ–Ω—É—Å –∑–∞ –æ—Ç–∑—ã–≤", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üéÅ –ê–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "üåê –ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã"]
    keyboard_markup.add(*(types.KeyboardButton(text) for text in buttons))

    text = "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n" \
           "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n\n" \
           "–ï—Å–ª–∏ —É –≤–∞—Å –ø—Ä–æ–ø–∞–ª–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ —Å–ø—Ä–∞–≤–∞ –Ω–∞ –∑–Ω–∞—á–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä—è–¥–æ–º —Å–æ –∑–Ω–∞—á–∫–æ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞."

    await message.answer(text, reply_markup=keyboard_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üåü –ë–æ–Ω—É—Å –∑–∞ –æ—Ç–∑—ã–≤"
@dp.message_handler(lambda message: message.text == "üåü –ë–æ–Ω—É—Å –∑–∞ –æ—Ç–∑—ã–≤")
async def review_bonus_handler(message: types.Message):
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "–û—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—É—à–∫–∏", 
        "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", 
        "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ]
    keyboard_markup.add(*(types.KeyboardButton(text) for text in buttons))

    text = "üåü –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ –æ—Ç–∑—ã–≤."

    await message.answer(text, reply_markup=keyboard_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤"
@dp.message_handler(lambda message: message.text == "–Ø –æ—Å—Ç–∞–≤–∏–ª(-–∞) –æ—Ç–∑—ã–≤")
async def feedback(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –ø—Ä–æ—Å—å–±–æ–π –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
    await message.answer_photo(
        photo="https://postimg.cc/xXLFr503",
        caption="üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞ (–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Å–∫—Ä–∏–Ω—à–æ—Ç, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞)."
    )

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    await FeedbackStates.waiting_for_screenshot.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=FeedbackStates.waiting_for_screenshot, content_types=types.ContentType.PHOTO)
async def process_screenshot(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—Å—å–±–æ–π –æ —Ñ–æ—Ç–æ –∫—É–ø–æ–Ω–∞
    await bot.send_message(
        chat_id=message.chat.id,
        text="üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –í–∞—à–µ–≥–æ –∫—É–ø–æ–Ω–∞ —Å—é–¥–∞ (–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞)."
    )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(screenshot=photo_id)

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –∫—É–ø–æ–Ω–∞
    await FeedbackStates.waiting_for_coupon.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –∫—É–ø–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=FeedbackStates.waiting_for_coupon, content_types=types.ContentType.PHOTO)
async def process_coupon(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    screenshot_id = data.get('screenshot')
    coupon_id = message.photo[-1].file_id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    screenshot = await bot.download_file_by_id(screenshot_id)
    coupon = await bot.download_file_by_id(coupon_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—Å—å–±–æ–π –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await bot.send_message(
        chat_id=message.chat.id,
        text="üìû –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥. –ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –º—ã –ø–æ–ø–æ–ª–Ω–∏–º –µ–≥–æ –Ω–∞ —Å—É–º–º—É –∫—É–ø–æ–Ω–∞.\n"
             "–§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ +7 –•–•–• –•–•–• –•–• –•–•"
    )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ñ–æ—Ç–æ –∫—É–ø–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(coupon=coupon_id)

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await FeedbackStates.waiting_for_phone.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=FeedbackStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    screenshot_id = data.get('screenshot')
    coupon_id = data.get('coupon')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–∑—ã–≤–µ –∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await bot.send_message(
        chat_id,
        text=f"üíå –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤! \n\n –û—Ç: {message.from_user.first_name} (@{message.from_user.username})\n\n"
             "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞:"
    )
    await bot.send_photo(chat_id, photo=screenshot_id)

    await bot.send_message(
        chat_id,
        text="\nüõí –§–æ—Ç–æ –∫—É–ø–æ–Ω–∞:"
    )
    await bot.send_photo(chat_id, photo=coupon_id)

    await bot.send_message(
        chat_id,
        text=f"\nüìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.text}"
    )

    # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç. üôå")

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(lambda message: message.text in ["–û—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—É—à–∫–∏", "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞"])
async def category_selected_handler(message: types.Message):
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "–Ø –æ—Å—Ç–∞–≤–∏–ª(-–∞) –æ—Ç–∑—ã–≤",
        "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ]
    keyboard_markup.add(*buttons)

    text = "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å, —Å–¥–µ–ª–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:\n\n" \
           "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Wildberries –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ.\n" \
           "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –ø—Ä–æ—Ñ–∏–ª—è –≤ –Ω–∏–∂–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É.\n" \
           "3. –í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–ü–æ–∫—É–ø–∫–∏¬ª.\n" \
           "4. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.\n" \
           "5. –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ—á–∫—É ¬´–û—Ç–∑—ã–≤—ã¬ª, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—ã—á–Ω–æ –ø–æ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞.\n" \
           "6. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤¬ª.\n" \
           "7. –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—É 5 –∑–≤–µ–∑–¥.\n" \
           "8. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."

    await message.answer(text, reply_markup=keyboard_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message_handler(lambda message: message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main_menu_handler(message: types.Message):
    await start_command(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üéÅ –ê–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"
@dp.message_handler(lambda message: message.text == "üéÅ –ê–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
async def action_goods_handler(message: types.Message):
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    keyboard_markup.add(*buttons)

    text = "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:\n" \
           "[–û—Ç–¥–µ–ª –∑–∞–±–æ—Ç—ã](–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞)\n" \
           "–ê —Ç–∞–∫ –∂–µ –±–æ–ª—å—à–∏–µ —Å–∫–∏–¥–∫–∏ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ :\n"\
           "[Wildberries](–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞)\n\n" \
           "üåü –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã! üéâ"

    await message.answer(text, reply_markup=keyboard_markup, parse_mode=types.ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üåê –ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã"
@dp.message_handler(lambda message: message.text == "üåê –ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã")
async def our_resources_handler(message: types.Message):
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    keyboard_markup.add(*buttons)

    text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å, –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∫ –Ω–∞—à–µ–º—É –±—Ä–µ–Ω–¥—É! üôå\n\n" \
           "–ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞ WB:\n\n" \
           "üõí –ù–∞—à –∫–∞—Ç–∞–ª–æ–≥ —ç—Ç–æ –ø–æ–¥—É—à–∫–∏ –û—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—É—à–∫–∏\n" \
           "[–û—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—É—à–∫–∏](–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞)\n\n" \
           "üëö –û–¥–µ–∂–¥–∞ –∂–µ–Ω—Å–∫–∞—è\n" \
           "[–û–¥–µ–∂–¥–∞ –∂–µ–Ω—Å–∫–∞—è](–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞)\n\n" \
           "–í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞–º! üòä"

    await message.answer(text, reply_markup=keyboard_markup, parse_mode=types.ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentType.TEXT)
async def process_text_message(message: types.Message):
    text = message.text
    if text == "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await ask_question_handler(message)
    elif text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await return_to_main_menu_handler(message)
    else:
        await forward_to_owner(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
async def ask_question_handler(message: types.Message):
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    keyboard_markup.add(*buttons)

    text = "üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π —É –í–∞—Å –≤–æ–ø—Ä–æ—Å –∏ –º—ã –±—ã—Å—Ç—Ä–æ –ø–æ–º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É."

    await message.answer(text, reply_markup=keyboard_markup)
    
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
async def return_to_main_menu_handler(message: types.Message):
    await start_command(message)
    await forward_to_owner(message)
# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞
async def forward_to_owner(message: types.Message):
    forwarded_message = await bot.send_message(
        chat_id,
        text=f"üì¨ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n\n<b>{message.text}</b>\n\n–û—Ç: {message.from_user.first_name} (@{message.from_user.username})",
        parse_mode=types.ParseMode.HTML
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp)